* Andrew Schwartzmeyer's dotfiles
** bootstrap
#+begin_src sh
  curl https://suchcodemuchlove.com/dotfiles/bin/raw/master/dotfiles > bootstrap && bash bootstrap
#+end_src

- Generates SSH keys if non-existent and prompts to add public key
- Clones =~/bin= scripts to make =mr= and =vcsh= available
- Backs up conflicting files (see =vcsh list-tracked=)
- Clones this repo to =~/.mr=
- Symlinks the =~/.mrconfig= file
- Executes =mr update= which does everything else

** structure
I use [[http://myrepos.branchable.com/][myrepos]] in combination with [[https://github.com/RichiH/vcsh][vcsh]] to fully automate the syncing
and version control of my various dotfile repositories.

This combination lets there exist a Git repository for each set of
dotfiles, such as my Emacs repo for =~/.emacs.d=, alongside those
co-existing in the same directory, that is, my Git repo has
=~/.gitconfig= and =~/.gitignore_global=, but my Zsh repo has
=~/.zshrc=, =~/.zprofile=, and =~/.zpreztorc=. Elements of this group
of Git repositories can be toggled at will, and clearly have their own
history and visibility to others.

*** myrepos - multiple repo management
Myrepos is a tool that enables parallel management of version control
repositories. Given a folder of simple configuration files which
specify the source and destination of a repo, and a =~/.mrconfig= to
include said folder, =mr checkout= will clone each source into its
respective destination.

My dotfiles framework begins with cloning this repo to =~/.mr=. With
the =mr= configuration files in =~/.mr/repos-available=, and symlinks
to the desired repos in =~/.mr/repos-enabled=, and the directive
=include = cat ~/.mr/repos-enabled/*= in =~/.mrconfig=, the command
=mr update= will automatically checkout the enabled repos, or if
already checked out, it will update them.

**** repos enabled by default
- [[https://github.com/andschwa/bin][~/bin]] scripts
- [[http://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration][git]] configuration
- [[https://github.com/nojhan/liquidprompt][liquidprompt]] shell theme
- [[https://github.com/andschwa/shell][shell]] configuration
- [[https://github.com/sorin-ionescu/prezto/][prezto]] zsh modules

**** other available repos
Enabling non-default repositories is as simple as symlinking:
#+begin_src sh
  cd ~/.mr/repos-enabled
  ln -s ../repos-available/emacs.conf .
#+end_src

- [[https://github.com/cask/cask][Cask]] Emacs package manager
- crontabs
- [[http://duply.net/][duply]] backup profiles
- [[https://github.com/andschwa/emacs][Emacs]] configuration
- [[https://github.com/lra/mackup][mackup]] OS X app settings using
- [[http://offlineimap.org/][offlinemap]] settings
- [[https://github.com/sstephenson/rbenv][rbenv]] Ruby version manager
- [[http://sieve.info/][sieve]] mail filters
- [[http://tmux.sourceforge.net/][tmux]] configuration with [[https://github.com/tmux-plugins/tpm][tpm]]

*** vcsh - dotfile management without symlinks
The repositories that track bare files which belong in =$HOME= (such
as =git= and =shell=), are all "cloned" into =$HOME= concurrently. The
magic that makes this happen is =vcsh=, which bare clones the repos to
=~/.config/vcsh/repos.d= and sets their (shared) working directory to
=$HOME=. Version control access to the different repos is then
delegated to =vcsh=, such as =vcsh foo status= or =vcsh bar diff=. In
this way, files that belong to different repos (such as =~/.gitconfig=
and =~/.zshrc=) can happily coexist (without being symlinked) in the
same directory. Since =mr= supports =vcsh=, these repos can be managed
in the same manner as any other.

** customization
My dotfiles framework is a modification of that documented by the
author of =vcsh= [[https://github.com/RichiH/vcsh/tree/master/doc][RichiH]]. Making this work for your own needs ought to
be relatively simple; just get your dotfiles into whatever set of
repos makes sense to you, and add them to =mr=.

Having a set of repositories lets me share only some publicly, as well
as keep their histories separate. I like having a separate file per
repo, which gets symlinked to the folder included by =mr=, so that I
can configure which repos are pulled in on each machine. I also
preferred using =vcsh= so that I have separate repos tracking
logically separate files in my home folder. If you want them all in
the same repo, then =vcsh= need not be used, and it can be placed
under =[.]= in a =mr= configuration; see the =mr= author's [[https://github.com/joeyh/myrepos/blob/master/mrconfig.complex][example]] of
a more complex setup. My bootstrap script handles the =mr= and =vcsh=
dependencies by pulling in my =~/bin= scripts, which include both, so
modify it as needed (you may prefer your distro's packages or your own
scripts folder).

** license
Except where otherwise noted (e.g. cronic, duply, mr, and vcsh),
scripts (and other code) are written and licensed by me, Andrew
Schwartzmeyer, under the provided AGPLv3 License.
